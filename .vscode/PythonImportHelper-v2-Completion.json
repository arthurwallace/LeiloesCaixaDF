[
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "locale",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "locale",
        "description": "locale",
        "detail": "locale",
        "documentation": {}
    },
    {
        "label": "Courier",
        "importPath": "trycourier",
        "description": "trycourier",
        "isExtraImport": true,
        "detail": "trycourier",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "get_property_type",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def get_property_type(description):\n    return description.split(\",\")[0].strip()\ndef send_email(subject, body):\n    # Configurar Courier\n    client = Courier(auth_token='pk_prod_XNB7MJGSQX4EMBHXE0K17EZE8FCA')\n    response = client.send_message(\n        message={\n            \"to\": {\"email\": \"arthur.wallace.silva@gmail.com\"},\n            \"content\": {\"title\": subject, \"body\": body}\n        }",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "send_email",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def send_email(subject, body):\n    # Configurar Courier\n    client = Courier(auth_token='pk_prod_XNB7MJGSQX4EMBHXE0K17EZE8FCA')\n    response = client.send_message(\n        message={\n            \"to\": {\"email\": \"arthur.wallace.silva@gmail.com\"},\n            \"content\": {\"title\": subject, \"body\": body}\n        }\n    )\ndef get_data_leilao(url):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "get_data_leilao",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def get_data_leilao(url):\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'}\n    try:\n        response = requests.get(url, headers=headers)\n        soup = BeautifulSoup(response.text, 'html.parser')\n        # Encontrar o elemento <i> com a classe 'fa-gavel'\n        icon_element = soup.find('i', {'class': 'fa-gavel'})\n        # Verificar se o elemento foi encontrado\n        if icon_element:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "verificar_novos_imoveis",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def verificar_novos_imoveis(df_atual):\n    try:\n        # Tentar carregar o arquivo de dados recentes\n        df_anterior = pd.read_csv(ARQUIVO_DADOS_RECENTES)\n    except (FileNotFoundError, pd.errors.EmptyDataError):\n        df_anterior = pd.DataFrame()\n    if not df_anterior.empty:\n        df_anterior = format_data_frame(df_anterior)\n        # Identificar novos imóveis\n        novos_imoveis = df_atual[~df_atual['N° do imóvel'].isin(df_anterior['N° do imóvel'])]",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "formatar_novos_imoveis",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def formatar_novos_imoveis(df_novos):\n    formatted_string = \"\"\n    for index, row in df_novos.iterrows():\n        formatted_string += (\n            f\"N° do Imóvel: {row['N° do imóvel']}\\n\"\n            f\"Cidade: {row['Cidade']}\\n\"\n            f\"Modalidade de Venda: {row['Modalidade de venda']}\\n\"\n            f\"Tipo de Imóvel: {row['Tipo de Imóvel']}\\n\"\n            f\"Descrição: {row['Descrição']}\\n\"\n            f\"Preço: {locale.currency(row['Preço'], grouping=True)}\\n\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "format_data_frame",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def format_data_frame(df, novos_imoveis = False):\n    df.columns = [col.strip() for col in df.columns]\n    df[\"N° do imóvel\"] = df[\"N° do imóvel\"].astype(str).str.zfill(13)\n    df[\"Preço\"] = df[\"Preço\"].apply(lambda x: pd.to_numeric(x.replace(\".\", \"\").replace(\",\", \".\"), errors=\"coerce\") if isinstance(x, str) else x)\n    df[\"Valor de avaliação\"] = df[\"Valor de avaliação\"].apply(lambda x: pd.to_numeric(x.replace(\".\", \"\").replace(\",\", \".\"), errors=\"coerce\") if isinstance(x, str) else x)\n    df[\"Desconto\"] = pd.to_numeric(\n        df[\"Desconto\"].astype(str).str.replace(\",\", \".\"), errors=\"coerce\"\n    )\n    df[\"Tipo de Imóvel\"] = df[\"Descrição\"].apply(get_property_type)\n    if novos_imoveis == True:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "get_sidebar_filters",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def get_sidebar_filters(df):\n    cidades_disponiveis = [\"Todos\"] + df[\"Cidade\"].unique().tolist()\n    cidade_filtro = st.sidebar.selectbox(\"Selecione a Cidade\", cidades_disponiveis)\n    modalidades_disponiveis = [\"Todas\"] + df[\"Modalidade de venda\"].unique().tolist()\n    modalidade_filtro = st.sidebar.selectbox(\n        \"Selecione a Modalidade de Venda\", modalidades_disponiveis\n    )\n    tipos_disponiveis = [\"Todos\"] + df[\"Tipo de Imóvel\"].unique().tolist()\n    tipo_filtro = st.sidebar.selectbox(\"Selecione o Tipo de Imóvel\", tipos_disponiveis)\n    # Adicionando opções de ordenação ao menu lateral",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "imprimir_imoveis",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def imprimir_imoveis(df):\n    for index, row in df.iterrows():\n        imagem_url = (\n            f\"https://venda-imoveis.caixa.gov.br/fotos/F{row['N° do imóvel']}21.jpg\"\n        )\n        modalidade_venda = row[\"Modalidade de venda\"]\n        cidade_bairro_uf = f\"{row['Cidade']}, {row['Bairro']} - {row['UF']}\"\n        descricao = row[\"Descrição\"]\n        preco = locale.currency(row[\"Preço\"], grouping=True).replace(\"$\", \"\\$\")\n        avaliacao = locale.currency(row[\"Valor de avaliação\"], grouping=True)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    st.set_page_config(\n        page_title=\"Leilões Caixa - DF\",\n        page_icon=\"🏠\"\n    )\n    st.title(\"Leilões de Imóveis Caixa - DF\")\n    with open('style.css') as f:\n        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)\n    # Lendo o arquivo CSV diretamente da URL com a codificação 'latin1'\n    url_csv = \"https://venda-imoveis.caixa.gov.br/listaweb/Lista_imoveis_DF.csv\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "ARQUIVO_DADOS_RECENTES",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "ARQUIVO_DADOS_RECENTES = 'Dados_com_data.csv'\ndef get_property_type(description):\n    return description.split(\",\")[0].strip()\ndef send_email(subject, body):\n    # Configurar Courier\n    client = Courier(auth_token='pk_prod_XNB7MJGSQX4EMBHXE0K17EZE8FCA')\n    response = client.send_message(\n        message={\n            \"to\": {\"email\": \"arthur.wallace.silva@gmail.com\"},\n            \"content\": {\"title\": subject, \"body\": body}",
        "detail": "main",
        "documentation": {}
    }
]